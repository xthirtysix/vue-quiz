{"remainingRequest":"/home/x36/git/vue-quiz/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/x36/git/vue-quiz/src/components/Question.vue?vue&type=style&index=0&id=1d8df916&scoped=true&lang=scss&","dependencies":[{"path":"/home/x36/git/vue-quiz/src/components/Question.vue","mtime":1592290774843},{"path":"/home/x36/git/vue-quiz/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/x36/git/vue-quiz/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/x36/git/vue-quiz/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/x36/git/vue-quiz/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/x36/git/vue-quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/x36/git/vue-quiz/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnVsIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDAlIDQwJTsKICBncmlkLXJvdy1nYXA6IDJyZW07CiAgZ3JpZC1jb2x1bW4tZ2FwOiAyMCU7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7CiAgbGlzdC1zdHlsZTogbm9uZTsKfQoKbGkgewogIHdpZHRoOiA1MCU7CiAgbWFyZ2luOiAwIGF1dG87Cn0KCi52YXJpYW50IHsKICBkaXNwbGF5OiBibG9jazsKICB3aWR0aDogMTAwJTsKICBtaW4td2lkdGg6IDIycHg7CiAgbWluLWhlaWdodDogMjJweDsKfQo="},{"version":3,"sources":["Question.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Question.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <b-card\n    tag=\"question\"\n    style=\"max-width: 40rem; margin: 0 auto;\"\n    class=\"mb-2\"\n  >\n    <template v-slot:header>\n      <h3>{{ question }}</h3>\n    </template>\n\n    <ul>\n      <li :key=\"i\" v-for=\"(variant, i) in variants\">\n        <b-button\n          href=\"#\"\n          class=\"variant\"\n          variant=\"primary\">\n          {{variant.value}}\n        </b-button>\n      </li>\n    </ul>\n  </b-card>\n</template>\n\n<script>\nconst MATH_ADD = 0;\nconst MATH_EXCLUDE = 1;\nconst VARIANTS_RANGE = 10;\n\nexport default {\n  data() {\n    return {\n      question: 'Oops, something went wrong...',\n      correctAnswer: 0,\n      variants: [\n        { isCorrect: false, value: 0 },\n        { isCorrect: false, value: 0 },\n        { isCorrect: false, value: 0 },\n        { isCorrect: false, value: 0 },\n      ],\n    };\n  },\n  methods: {\n    generateRandomNumber(min, max, exclude) {\n      const generated = Math.round(min + Math.random() * (max - min));\n      if (exclude && generated === exclude) {\n        return this.generateRandomNumber(min, max, exclude);\n      }\n      return generated;\n    },\n    generateQuestion() {\n      const firstNumber = this.generateRandomNumber(1, 100);\n      const secondNumber = this.generateRandomNumber(1, 100);\n      const operation = this.generateRandomNumber(MATH_ADD, MATH_EXCLUDE);\n\n      switch (operation) {\n        case (MATH_ADD):\n          this.question = `${firstNumber} + ${secondNumber} = ?`;\n          this.correctAnswer = firstNumber + secondNumber;\n          break;\n        case (MATH_EXCLUDE):\n          this.question = `${firstNumber} - ${secondNumber} = ?`;\n          this.correctAnswer = firstNumber - secondNumber;\n          break;\n        default:\n          this.question = 'Oops... something went wrong';\n      }\n\n      const numbers = [];\n\n      while (numbers.length < this.variants.length) {\n        const generatedNumber = this.generateRandomNumber(\n          this.correctAnswer - VARIANTS_RANGE,\n          this.correctAnswer + VARIANTS_RANGE,\n          this.correctAnswer,\n        );\n\n        if (numbers.indexOf(generatedNumber) === -1) {\n          numbers.push(generatedNumber);\n        }\n      }\n\n      numbers.forEach((number, i) => {\n        this.variants[i].value = number;\n        console.log(number);\n      });\n\n      const correctVariant = this.generateRandomNumber(0, this.variants.length);\n\n      this.variants[correctVariant] = {\n        isCorrect: true, value: this.correctAnswer,\n      };\n    },\n  },\n  created() {\n    this.generateQuestion();\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\nul {\n  display: grid;\n  grid-template-columns: 40% 40%;\n  grid-row-gap: 2rem;\n  grid-column-gap: 20%;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nli {\n  width: 50%;\n  margin: 0 auto;\n}\n\n.variant {\n  display: block;\n  width: 100%;\n  min-width: 22px;\n  min-height: 22px;\n}\n</style>\n"]}]}